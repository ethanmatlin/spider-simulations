import numpy as np 
import random
import plotly
import plotly.plotly as py
import time
import plotly.graph_objs as go
import h5py
import time 
import matplotlib.pyplot as plt
import pandas as pd
import mpl_toolkits.axes_grid1 as axes_grid1
import math 
import spider_simulation


T = 200

avg_num_at = np.zeros((2, T))
num_clusters = np.zeros((2, T))

for omni in True,False:
	if omni:
		i = 1
	else:
		i=0
	meta_parameters = {'num_spiders': 20,
						'num_locations': 20,
						'xi': 1, 
						'kappa': .5, 
						'T': T, 
						'arrival_rate': 20, 
						'size_continuous_bool': True,
						'time_variant_arrival_rate': False, 
						'space_variant_arrival_rate': False,
						'space_variant_arrival_rate_mat': np.array([[1,2,3,4,5],[1,2,3,4,5],[1,2,3,4,5],[1,2,3,4,5],[1,2,3,4,5]]),
						'space_variant_arrival_rate_lb': 10,
						'space_variant_arrival_rate_ub': 30,
						'omnicient': omni, 
						'random_movement': True, 
						'random_movement_sd': 1,
						'smooth': False,
						'all_at_once': True,
						'start_clusters': False
					}
	spider_simulation.simulate(meta_parameters)

	sizes_panel = h5py.File("size.h5", 'r')
	sizes_panel = list(sizes_panel["sizes_panel"])
	sizes_panel = np.array(sizes_panel)

	number_at_location_time_series = h5py.File("locationNum.h5", 'r')
	number_at_location_time_series = list(number_at_location_time_series["number_at_location_time_series"])
	number_at_location_time_series = np.array(number_at_location_time_series)

	for t in range(len(sizes_panel[1])):
		avg_num_at[i, t] = np.mean(number_at_location_time_series[t][np.nonzero(number_at_location_time_series[t])])
		num_clusters[i, t] = np.count_nonzero(number_at_location_time_series[t])


plt.plot(num_clusters[1,:])
plt.plot(num_clusters[0,:])
plt.legend(['Omni=True', 'Omni=False'])
plt.xlabel("Time")
plt.ylabel("Number of Clusters")
plt.savefig('compare_omni_num_clusters' + '.png', bbox_inches='tight')
plt.close()


plt.plot(avg_num_at[1,:])
plt.plot(avg_num_at[0,:])
plt.legend(['Omni=True', 'Omni=False'])
plt.xlabel("Time")
plt.ylabel("Number per Cluster")
plt.savefig('compare_omni_num_at_over_time' + '.png', bbox_inches='tight')
plt.close()


avg_num_at = np.zeros((5, T))
num_clusters = np.zeros((5, T))
eps = [0,.5,2,10]

for i in range(len(eps)):
	meta_parameters = {'num_spiders': 20,
						'num_locations': 20,
						'xi': 1, 
						'kappa': .5, 
						'T': T, 
						'arrival_rate': 20, 
						'size_continuous_bool': True,
						'time_variant_arrival_rate': False, 
						'space_variant_arrival_rate': False,
						'space_variant_arrival_rate_mat': np.array([[1,2,3,4,5],[1,2,3,4,5],[1,2,3,4,5],[1,2,3,4,5],[1,2,3,4,5]]),
						'space_variant_arrival_rate_lb': 10,
						'space_variant_arrival_rate_ub': 30,
						'omnicient': False, 
						'random_movement': True, 
						'random_movement_sd': eps[i],
						'smooth': False,
						'all_at_once': True,
						'start_clusters': False
					}
	spider_simulation.simulate(meta_parameters)

	sizes_panel = h5py.File("size.h5", 'r')
	sizes_panel = list(sizes_panel["sizes_panel"])
	sizes_panel = np.array(sizes_panel)

	number_at_location_time_series = h5py.File("locationNum.h5", 'r')
	number_at_location_time_series = list(number_at_location_time_series["number_at_location_time_series"])
	number_at_location_time_series = np.array(number_at_location_time_series)

	for t in range(len(sizes_panel[1])):
		avg_num_at[i, t] = np.mean(number_at_location_time_series[t][np.nonzero(number_at_location_time_series[t])])
		num_clusters[i, t] = np.count_nonzero(number_at_location_time_series[t])


plt.plot(num_clusters[0,:])
plt.plot(num_clusters[1,:])
plt.plot(num_clusters[2,:])
plt.plot(num_clusters[3,:])
plt.legend(['Eps=' + str(eps[0]), 'Eps=' + str(eps[1]), 'Eps=' + str(eps[2]), 'Eps=' + str(eps[3])])
plt.xlabel("Time")
plt.ylabel("Number of Clusters")
plt.savefig('compare_eps_num_clusters' + '.png', bbox_inches='tight')
plt.close()


plt.plot(avg_num_at[0,:])
plt.plot(avg_num_at[1,:])
plt.plot(avg_num_at[2,:])
plt.plot(avg_num_at[3,:])
plt.legend(['Eps=' + str(eps[0]), 'Eps=' + str(eps[1]), 'Eps=' + str(eps[2]), 'Eps=' + str(eps[3])])
plt.xlabel("Time")
plt.ylabel("Number per Cluster")
plt.savefig('compare_eps_num_at_over_time' + '.png', bbox_inches='tight')
plt.close()

